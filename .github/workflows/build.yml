name: Build Java Project

on:
  push:
    branches:
      - master
  #    tags:
  #      - 'v*'
  pull_request:
    branches:
      - master
#    tags:
#      - 'v*'

env:
  TOKEN_GITHUB: ${{ secrets.TOKEN_GITHUB }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Compile project
        run: |
          mkdir -p bin
          javac -d bin src/jogo/grupo3/turmaA/*.java

      - name: Create JAR
        run: |
          jar cfe a-lenda-de-silverhollow.jar jogo.grupo3.turmaA.Main -C bin .

      - name: Upload JAR as artifact
        uses: actions/upload-artifact@v4
        with:
          name: a-lenda-de-silverhollow
          path: a-lenda-de-silverhollow.jar

  verify-github-token:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check if GITHUB_TOKEN is set
        run: |
          if [ -z "GITHUB_TOKEN" ]; then
            echo "GITHUB_TOKEN is not set"
          else
            echo "GITHUB_TOKEN is set"
          fi

      - name: Print repository info
        run: |
          echo "Repository: ${{ github.repository }}"

      - name: Verify GITHUB_TOKEN
        run: |
          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }})
          
          echo "Response: $response"

  release:
    runs-on: ubuntu-latest
    needs: [ build, verify-github-token ]

    steps:
      - name: Download JAR Artifact
        uses: actions/download-artifact@v4
        with:
          name: a-lenda-de-silverhollow

      - name: List downloaded files
        run: ls -la

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: $GITHUB_TOKEN
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: false
          prerelease: false

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.sha }}
          release_name: Release ${{ github.sha }}
          draft: false
          prerelease: false

      - name: Upload JAR file
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: a-lenda-de-silverhollow.jar
          asset_name: a-lenda-de-silverhollow.jar
          asset_content_type: application/java-archive

#      - name: Create Release
#        id: create_release
#        run: |
#          tag_name="v1.0-${{ github.sha }}"
#          response=$(curl -s -H "Authorization: token $GITHUB_TOKEN" \
#            -H "Accept: application/vnd.github.v3+json" \
#            -d "{\"tag_name\":\"$tag_name\", \"name\":\"Release $tag_name\", \"body\":\"Novo build dispon√≠vel!\"}" \
#            https://api.github.com/repos/${{ github.repository }}/releases)
#
#          echo "Release criada: $response"
#          echo "::set-output name=id::$(echo $response | jq -r .id)"
#
#      - name: Upload JAR to Release
#        run: |
#          curl -X POST -H "Authorization: token $GITHUB_TOKEN" \
#            -H "Content-Type: application/java-archive" \
#            --data-binary @a-lenda-de-silverhollow.jar \
#            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=c"
